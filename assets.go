// Code generated by go-bindata.
// sources:
// views/article.html
// views/article_edit.html
// views/article_form.html
// views/article_list.html
// views/fortune.html
// views/index.html
// views/layout.html
// views/login.html
// views/uncss.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsArticleHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xc1\x6e\xbb\x30\x0c\xc6\xcf\xfc\x9f\xc2\xca\x1d\x42\x7b\xf8\x9f\xa0\x52\x2f\x93\x26\xed\x30\x69\x7b\x01\x8f\x18\x88\x94\x05\x44\x4c\xbb\xa9\xeb\xbb\x2f\x09\x94\x4a\x1d\x52\x7b\x02\x7f\x9f\xfd\xfd\x6c\x38\x9d\x40\x51\xad\x2d\x81\x38\x68\x3a\x0a\x38\x9f\xff\x79\xed\xa8\xb9\x85\x6c\x3f\xb0\xae\x0c\x05\x2d\x49\x92\xa2\xdd\xec\xbc\x95\xbd\x6b\x8e\x5a\x21\xbd\x10\x8d\x1e\x2a\x83\xce\x95\xc2\x10\x2a\x11\x9b\x5e\xc7\x0f\xa3\x5d\x4b\x6a\xcf\xf0\x03\x4f\xdd\xf0\x89\x0c\x62\x9b\xe7\xff\xb3\x7c\x93\xe5\x5b\x11\x03\xfa\x38\x1f\x43\xe9\x8b\x67\xb6\xae\x21\x7b\xe9\x9a\x86\xd4\x05\x6c\xf1\xe0\x1b\x67\xeb\xd9\x2d\xd9\xb3\x9f\x14\x08\xed\x40\x75\x29\x24\x4e\x1b\xcb\x10\xf9\x66\xc6\xc6\x77\xc8\xd1\xf6\xd3\x80\x00\x0e\xab\x97\xe2\xaa\xec\x0a\xd7\xa3\xbd\xac\x5f\x23\xd4\x98\xd2\x37\xa5\xce\x0b\xc1\x95\xc1\xf6\x0f\x9c\xf8\x64\x1c\x3d\x06\xbd\x45\xde\x01\xae\xa0\xec\x83\xe7\x91\xd2\xbc\x60\x62\xb1\xc6\xe8\xc9\x56\xda\xdc\x60\xee\x66\x2b\x32\xc4\xb4\xa4\xcf\xe5\x5a\x3e\x0f\xfe\x83\xa5\xdd\x1f\x40\x21\xe3\xcf\xbb\x1e\xb4\xf6\xf6\x1b\x00\x00\xff\xff\x5c\xa5\x92\xee\x85\x02\x00\x00")

func viewsArticleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticleHtml,
		"views/article.html",
	)
}

func viewsArticleHtml() (*asset, error) {
	bytes, err := viewsArticleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article.html", size: 645, mode: os.FileMode(420), modTime: time.Unix(1444426180, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsArticle_editHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcf\x6e\xb3\x30\x10\xc4\xcf\x7c\x4f\xb1\xda\xef\xdc\xa4\xb9\x43\xa4\x1e\x7a\x6e\x25\xf2\x02\x5b\xbc\x01\x4b\xe6\x4f\xed\x05\x5a\x45\x79\xf7\xda\x06\xa2\x84\xa6\x6a\x6f\xe6\xe7\x61\x66\xd6\xda\xd3\x09\x14\x1f\x75\xc3\x80\x83\xe6\x11\xe1\x7c\xfe\xe7\xd9\xa8\xa5\x82\xcd\x93\x15\x5d\x18\x0e\x2c\x49\x92\xb4\xda\xed\x9f\x95\x16\xa0\x09\xa7\x5b\x0f\xe2\xc5\xb1\xb5\x35\xd4\x2c\x55\xab\x32\x7c\x7d\xc9\x0f\x18\x79\x92\xea\xa6\xeb\x05\xe4\xb3\xe3\x0c\x85\x3f\x04\x41\x7b\x85\x68\x31\x8c\xd0\x50\xcd\x97\x8f\xce\x50\xc1\x55\x6b\x14\xdb\x0c\x0f\x13\x1b\xc8\xf4\x5e\xe1\xeb\x6c\x22\xf1\x3d\x10\x2c\xbf\xf7\xda\xb2\xfa\x31\xa1\x30\xe4\x5c\x86\xce\xf4\x25\x82\x22\xa1\x07\x21\x5b\xb2\x64\xf8\xff\x26\x78\x12\xdc\xe4\xe6\x11\x5d\xc5\x06\xf0\xb7\xd4\x79\x18\x2a\x8d\x7f\xcb\xf5\x38\x0b\xbd\x1e\x68\x62\xf7\xcc\x83\x21\x59\xa6\xc5\x33\xfa\xdb\x76\xf4\x43\xed\x1e\xd7\xd6\xe1\x72\x1f\x0d\xfd\xc9\xbb\xa5\xdb\xe5\xf7\xdf\xab\xba\xef\x3d\xdd\xba\xa4\x0b\x0d\xef\x58\xb9\xfe\xad\xd6\x72\x51\xe7\x34\xf0\x24\x4b\xb7\x61\x1b\xf6\x61\x89\xb8\x51\xf3\x3a\xcd\xa7\xaf\x00\x00\x00\xff\xff\x3f\xf6\x32\x8c\x6d\x02\x00\x00")

func viewsArticle_editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_editHtml,
		"views/article_edit.html",
	)
}

func viewsArticle_editHtml() (*asset, error) {
	bytes, err := viewsArticle_editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_edit.html", size: 621, mode: os.FileMode(420), modTime: time.Unix(1444426180, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsArticle_formHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\x4b\x4e\xc3\x30\x10\x5d\xa7\xa7\x18\x0d\x6b\x14\xba\xb7\xb3\x61\x0f\x48\xed\x05\x86\x78\x9a\x58\x72\x3e\xd8\xe3\x06\x54\xf5\xee\x38\x09\x41\x6a\xa0\xca\x72\x9e\xdf\x4f\x7e\x97\x0b\x18\x3e\xd9\x96\x01\xcf\x96\x07\x84\xeb\x75\x97\x65\x99\xaa\xf7\xc5\x0b\x0f\x40\x5e\x6c\xe9\x58\xe5\xe9\x9e\xf0\x53\xe7\x1b\x68\x58\xea\xce\x68\x7c\x7b\x3d\x1c\x71\xc2\x33\x65\xdb\x3e\x0a\xc8\x57\xcf\x1a\x85\x3f\x05\xc1\x26\x86\x58\x71\x8c\xd0\x52\xc3\xbf\x47\xef\xa8\xe4\xba\x73\x86\xbd\xc6\xe3\x8c\x79\xfe\x88\xd6\xb3\xb9\x6b\x56\x3a\x0a\x41\x63\x70\xb1\x42\x30\x24\xf4\x28\xe4\x2b\x16\x8d\x0f\x37\x19\x33\xe1\x26\xe2\x30\x41\x9b\x09\x3f\x1d\xa9\x72\xe9\x37\xd6\x2d\x17\x74\xe5\x32\x2a\xc9\x33\x2d\xe2\xc9\xc8\x77\x43\x6a\xba\x7f\x5a\x7b\x8c\x8f\x85\xca\x17\xcd\x76\x91\xf0\xb7\x45\xf8\xef\xbb\x43\x7c\x6f\x6c\x12\x9e\xc9\xc5\x74\x3e\x27\x73\xe1\x99\xa8\xf2\x71\xb0\x62\x97\x66\xe6\xd6\x8c\xe3\x7e\x07\x00\x00\xff\xff\xb8\x19\xbc\xb5\xf1\x01\x00\x00")

func viewsArticle_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_formHtml,
		"views/article_form.html",
	)
}

func viewsArticle_formHtml() (*asset, error) {
	bytes, err := viewsArticle_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_form.html", size: 497, mode: os.FileMode(420), modTime: time.Unix(1444426180, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsArticle_listHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcf\x8e\x9b\x30\x10\xc6\xcf\xf0\x14\x23\xdf\xc1\x24\x87\x9e\x1c\x4b\xb9\x54\xaa\x54\x55\x95\xda\x17\x70\x61\x00\x4b\xae\x8d\x6c\x13\xb4\xca\xe6\xdd\xd7\xe6\xef\x66\x17\x6d\x72\x63\xbe\x19\xcf\xef\xf3\x87\xaf\x57\xa8\xb0\x96\x1a\x81\x5c\x24\x0e\x04\x6e\xb7\x34\x68\x83\xf4\x2d\xe4\x67\xeb\x65\xa9\xd0\x45\x31\x49\x12\xd6\x1e\xf8\x2a\x49\x0d\x42\x7b\xcc\xca\xd6\x1a\x6d\x94\x69\x64\x29\x14\x18\x5b\xa1\x65\x34\x0c\xa6\x49\x58\x23\x6b\xc8\x7f\x9a\xa6\xc1\x6a\x59\xd1\x71\x26\xa0\xb5\x58\x9f\x08\x1d\xac\xf4\x48\xf8\x2f\x1c\x18\x15\x9c\xd1\x6e\x3a\x84\x7a\x9d\xee\x15\x94\x4a\x38\x77\x22\x62\xe6\x92\x69\xc6\x0a\xdd\x20\xe4\xd3\xdc\x04\x32\x76\x65\xe5\x3f\xdc\xef\xfe\x9f\x92\xae\x5d\xc1\x09\x53\x92\x8f\x1f\x71\x3c\x5f\xdb\x67\x0f\xaf\xf0\xdd\xd8\xff\xc2\x03\x39\x16\xc5\xb7\xbc\x38\xe4\xc5\x31\xe6\x00\x14\x36\xaf\x33\x9f\xc6\xc3\x7f\x54\xdf\x84\x3e\x01\x2f\xbd\xc2\x13\x89\xda\x5f\xd1\xa8\x98\x62\x90\xf9\x58\xc7\x56\xa8\xe2\xcd\xd2\x24\xd9\x0d\x23\x98\xd2\xe2\x32\xb9\x9a\xfb\x3b\xc6\xc3\xd4\x57\x2e\x68\xaf\xbb\xe9\xc8\xea\x67\x53\x38\x73\x9d\xd0\x4b\x86\xb5\x80\x5a\x64\xf8\x82\x99\x0b\x42\xec\xd2\xd8\xe6\x8b\xc7\x31\x7c\xe5\xf0\x59\xf2\x47\xee\x03\xea\x3e\x4f\x3f\x7d\x51\xac\xa4\x5f\x59\x63\xb1\x07\xea\x50\x97\x52\x7d\x66\x3d\xda\x5e\xa1\xc2\xf0\x1a\x97\xfd\x73\xb9\x47\xf0\x36\x84\x97\x99\x1d\x04\xa3\xcb\xff\xbc\xbf\x19\xa3\xd3\xe3\x7b\xa7\xde\xbf\x73\xda\x2b\x9e\x6e\xd2\xf6\xf5\x16\x00\x00\xff\xff\x76\xe1\x5f\x00\x9f\x03\x00\x00")

func viewsArticle_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_listHtml,
		"views/article_list.html",
	)
}

func viewsArticle_listHtml() (*asset, error) {
	bytes, err := viewsArticle_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_list.html", size: 927, mode: os.FileMode(420), modTime: time.Unix(1444426180, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsFortuneHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x2a\xcb\x4c\x2d\x57\x52\xa8\xad\xe5\x02\x8a\x95\x67\x96\x64\x28\xe8\x05\x96\xe6\x97\xa4\x82\x44\x38\x39\x39\x6d\x32\x0c\xed\x94\x81\x32\x7a\x9e\x2e\x40\x11\x1b\x7d\x20\x17\x2c\x9c\x94\x93\x9f\x9c\x5d\x08\x52\x08\xe6\x73\x82\x94\x84\xa4\x56\x94\x40\xb5\x71\xda\xa4\xe5\x03\xe5\x8a\xec\x40\xe2\x8e\xa5\x25\x19\xf9\x45\x60\xed\x50\x51\xb0\x11\xfa\xc8\x66\x00\xd5\xa5\xe6\xa5\x40\x9d\x01\x65\x01\x02\x00\x00\xff\xff\x2a\x1b\x20\x20\xa5\x00\x00\x00")

func viewsFortuneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsFortuneHtml,
		"views/fortune.html",
	)
}

func viewsFortuneHtml() (*asset, error) {
	bytes, err := viewsFortuneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/fortune.html", size: 165, mode: os.FileMode(420), modTime: time.Unix(1444426180, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xd0\x41\x6b\xbc\x30\x10\x05\xf0\xb3\xfb\x29\x86\x39\xbb\xba\x1e\xfe\x87\xfd\xa3\x81\x96\x5e\x0b\xa5\x14\x7a\x1e\x75\x56\x53\x4c\x26\x24\xb3\x16\x59\xf6\xbb\x37\xf6\x50\x0a\xbd\x85\xc7\x23\xbf\xc7\xdc\x6e\x30\xf2\xc5\x7a\x06\x5c\x2d\x7f\x22\xdc\xef\x87\xa2\x28\xda\xb9\x31\xef\xbc\x0c\xe2\xb8\xad\xf3\xfb\x3b\x0b\xb0\xca\x40\x7d\x87\xb3\x6a\xf8\x5f\xd7\x69\x98\xd9\x51\x25\x71\xaa\x11\x74\x0b\x2c\x97\x0e\x5f\x38\x26\xf1\x68\x9e\x37\xf0\xe4\x18\x6c\x82\x36\x05\xf2\x10\xa2\x04\x8e\xba\x75\xb8\xe7\x68\x5e\xc5\x91\xf5\xf0\x48\xd7\xe9\x9a\x91\xbd\x63\x4a\x68\x1d\x2b\xfd\xea\xf6\x36\xea\xfc\x44\xca\x08\x83\x78\x65\xaf\x1d\x36\xe7\xf3\xe9\xd8\x34\xc7\xd3\x3f\x34\x79\x7f\xf5\x30\x71\x9e\x0d\x1b\x53\x4c\x20\xcb\x58\xfe\x11\x3f\xa4\x7f\xb3\xba\x64\x75\xe4\x95\x97\x3d\xfe\x11\x03\xa5\x64\xc5\x67\xa2\x84\x85\x32\x62\x87\xaa\xad\x83\x39\xe4\xaf\xd9\x8f\xfb\x41\xbe\x02\x00\x00\xff\xff\x88\xce\x22\x3d\x25\x01\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 293, mode: os.FileMode(420), modTime: time.Unix(1444426180, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x5f\x4f\xe4\x36\x10\x7f\x86\x4f\xe1\xe6\x65\x77\xab\x24\xee\x42\x8f\xf6\x8e\x64\x55\x0e\xe8\xe9\xa4\xf6\xae\xaa\xa8\xd4\x0a\xf1\xe0\x4d\x26\x8e\xc1\xb1\x73\xb6\xb3\x61\x0b\xfb\xdd\x3b\x76\x08\x0b\x65\x85\x4e\xf7\x92\x38\xf3\xe7\x37\xe3\x99\xf9\x4d\xee\xee\x48\x09\x95\x50\x40\x22\xd6\xb6\x11\xd9\x6c\xf6\xb3\xef\xce\x3e\x9f\x5e\xfc\xf3\xc7\x39\xa9\x5d\x23\x17\xfb\x99\x7f\x11\xc9\x14\xcf\x23\x50\xd1\x62\x7f\x2f\xab\x81\x95\xf8\xde\xcb\x1a\x70\x8c\x14\x35\x33\x16\x5c\x1e\x75\xae\x4a\x7e\x8e\x82\x62\xc9\x2c\x90\xda\x40\x95\x47\x18\x22\x3d\xd5\xaa\x12\xbc\x33\xcc\x09\xad\xd2\x33\xdd\x30\xa1\x30\x56\xb4\x05\xa9\x9d\x6b\x13\xf8\xd2\x89\x55\x1e\xfd\x9d\xfc\x75\x92\x9c\xea\xa6\x45\xf3\xa5\x84\x88\x14\x5a\x39\x50\x18\xe1\xe3\x79\x0e\x25\x87\x27\x7e\x8a\x35\x90\x47\x2b\x01\x7d\xab\x8d\x7b\x62\xda\x8b\xd2\xd5\x79\x09\x2b\x51\x40\x12\x3e\x62\x22\x94\x70\x82\xc9\xc4\x16\x4c\x42\x3e\x1f\x60\x9c\x70\x12\x16\xe7\xb2\x17\x8a\x19\x92\x10\x9f\xef\x85\x97\x61\x82\x19\x1d\xb4\xde\x4e\x0a\x75\x43\x0c\xc8\x3c\x12\x18\x24\x22\x6e\xdd\x62\x64\xd1\x30\x0e\xb4\x55\x3c\x7a\xb8\x2e\xad\xd8\xca\x1b\x24\xf3\xa3\xdb\xf9\x51\x1a\x34\x56\xfc\x0b\x36\x8f\x82\x24\xfa\x26\xb0\xc3\x83\xdb\xc3\x83\x67\x60\x41\xf2\x6d\x60\x6f\x8f\x6e\xdf\x3e\xcf\x2c\x48\xfe\x0f\x66\xdd\x5a\x82\xad\x01\xdc\x88\x80\x23\x92\x16\xd6\x8e\x11\x1c\xdc\x3a\xea\xbf\x83\xa3\x2d\x8c\x68\x1d\x61\x76\xad\x0a\x62\x4d\x31\x98\x5f\xa3\x36\xa3\x83\xce\x8f\x0e\x7d\x98\x9d\x6c\xa9\xcb\x75\xf0\xf3\x02\x30\xfe\x88\xe7\xf9\x22\x63\x63\xba\xd1\xd8\x94\x8c\x32\xc4\x40\x5d\xb0\x51\x6c\x15\x0e\x7b\x59\x27\x87\x83\x4f\xfa\x89\x1f\xb5\x8e\x15\x37\x7a\x05\xa6\x92\xba\x4f\x0b\xdd\xd0\xce\x82\xb1\xf4\xf0\xc7\x9f\x0e\x8e\xde\x1c\x51\x18\x60\xa3\xc5\x89\xbd\x19\xb0\xd1\x7f\x27\x12\x17\xae\xee\x96\x01\xe2\xd1\xe9\x54\x97\xf0\x9a\x17\xce\xb6\x74\xfa\x9d\x09\x43\x9e\x2e\x59\xc7\x3b\xf8\xe5\xc1\xdb\x23\x79\x04\x85\x19\xba\xd7\x40\x0c\x16\x25\x5a\xfc\x89\xcf\xd7\xac\x2a\x1c\xf9\x4e\x21\x1d\x7e\x1d\x0e\xcf\x6d\x33\xfa\x50\xa0\x8c\x8e\x35\xcb\x5a\x52\x48\x66\xb1\xe3\xbe\xea\xd8\x6a\xf4\xfd\x1d\x59\xd1\x30\x29\xac\x23\xcb\x35\x6e\x03\x2b\xb8\xca\x68\x1b\x7a\x43\xb7\xcd\xc9\x2c\x14\x9e\xbd\x01\x07\x39\xe2\xa0\x69\x25\x73\xb8\x38\x3c\xf9\x22\x92\xfa\xdd\xe1\x5d\x9e\xd8\x65\x95\xd6\x6e\xec\xed\x98\xb4\x67\xfa\x3b\x4a\x57\x18\xb2\x64\x4e\x9b\xb4\x3f\x4c\xb5\xe1\xb4\xa8\xa1\xb8\xa1\x68\x02\x06\xb0\xcc\x99\x6d\x99\x1a\xb3\xad\x18\xa9\x58\xe2\x17\xd1\x9b\x30\x4e\xa8\x5a\xf8\xcb\xee\x02\xbe\x16\xdc\xb2\xfe\x11\xd5\xda\xe4\x31\xd4\x57\xc4\x40\xfb\xc3\xe7\x21\xf0\xae\xa2\x22\xe9\x6f\x9a\x73\x28\x87\x4b\x6e\x63\x52\xa9\xb9\xee\xdc\x4e\x28\xa9\x8b\x9b\x17\x50\x20\x2d\xec\x02\x11\x6a\x27\x46\xa7\x3c\x4a\xc2\xa4\x7b\x89\xa4\xca\xb1\xe4\xdb\x32\x67\x23\xd3\xa6\x55\xa7\x42\x1f\xa6\x22\xb6\xb1\x8e\x79\x6c\x62\x16\x37\xb3\x3b\x71\x39\xf9\xa0\x35\x97\x70\xa2\x98\x5c\x3b\x51\xd8\xcf\xcb\x6b\x6c\xd9\xe4\x2a\x37\xc7\xe2\xd2\x5c\xe5\xfe\x71\x7f\xff\xe8\x3f\xbb\x9b\x7a\x49\xfa\x25\x1f\x5e\xf7\xf7\x97\x57\xb3\xb4\xed\x6c\x3d\x65\x86\x77\x0d\x6e\x5b\x3b\xdb\xc4\x41\x29\xf3\xf9\xf7\x0a\x7a\x72\x86\x83\x31\x9d\x1d\xb3\xdc\xa6\x05\x8e\xb2\x83\x73\x09\xde\x70\xaa\x67\x71\x83\x42\x0e\xee\x41\x62\xdf\xaf\x2f\x18\xff\x84\x5b\x1c\x75\x97\x3f\x5c\x1d\xb3\x34\x6c\x90\x7c\x8e\x27\xbf\x45\xf8\x71\x93\xb6\xcc\xa0\xe9\x27\x24\x5e\x2a\x14\x52\xd9\xbd\x07\x1c\x7d\x98\xfa\x0b\x6d\x66\x53\xa4\x56\xa9\xfb\xb8\xd4\x45\xc8\x26\x9e\x0c\x45\x98\xc4\x13\x4a\xfb\xbe\x4f\x79\xb8\x6f\xc2\xc6\x0b\x07\x3e\x6f\xbf\xae\x2d\x5a\x72\x36\x99\x1d\xef\x73\x36\x9d\x0c\x09\x4f\x62\x32\x79\xf9\xe7\xfa\xf0\xf1\x8c\x60\xd1\xbd\x92\x75\x4e\x8f\x2e\x16\x7b\xe1\x65\x2d\x6e\x5c\xcf\x06\x2f\x0f\x54\xd8\xae\xbd\x61\xdd\x21\xa1\xc2\x3f\x75\xdb\xbe\x27\x3f\xe0\x81\x47\x9b\xcd\x56\xf9\x5f\x00\x00\x00\xff\xff\x17\x96\x74\x0f\x9e\x07\x00\x00")

func viewsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutHtml,
		"views/layout.html",
	)
}

func viewsLayoutHtml() (*asset, error) {
	bytes, err := viewsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/layout.html", size: 1950, mode: os.FileMode(420), modTime: time.Unix(1444426180, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x4b\x0a\xc2\x30\x10\x40\xd7\xe9\x29\x86\xb9\x40\x71\x9f\xf6\x04\x82\x82\x5e\x20\x9a\xa9\x09\xe4\x47\x3e\x2d\x52\x7a\x77\xd3\x88\x0b\xa1\xbb\x79\x8f\x99\xe1\xad\x2b\x48\x9a\xb4\x23\xc0\x59\xd3\x82\xb0\x6d\x1d\x63\x8c\xab\xd3\x78\xf6\x2f\xed\x78\x5f\xa7\x66\x26\x1f\x2d\x58\xca\xca\xcb\x01\xaf\x97\xdb\x1d\x9b\x67\x5c\xbb\x50\x32\xe4\x77\xa0\x01\x83\x48\x69\xf1\x51\x22\x38\x61\xff\x38\x18\xf1\x24\xe5\x8d\xa4\x58\xcf\x7f\xfa\xe0\x45\x2a\x0f\xab\x33\xc2\x2c\x4c\xa9\xd8\x2a\xbe\x7b\xbc\xdf\x1b\xc6\xae\x36\x93\x93\x7b\xe9\x27\x00\x00\xff\xff\xa8\x7e\x8c\xbe\xbe\x00\x00\x00")

func viewsLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLoginHtml,
		"views/login.html",
	)
}

func viewsLoginHtml() (*asset, error) {
	bytes, err := viewsLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/login.html", size: 190, mode: os.FileMode(420), modTime: time.Unix(1436870288, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsUncssHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\xcb\x6e\xdc\x3a\x0c\x5d\xcf\xfd\x0a\x66\x96\x17\x30\x06\xdd\x3b\x59\xf4\xb5\x28\x50\x34\x40\xbb\xe9\x92\x96\x18\x8f\x30\x7a\x95\xa2\x92\xf8\xef\x4b\xd9\x1e\x61\xd0\xa6\x0b\x9b\x14\x1f\x87\x14\x75\x38\xde\x7d\xfc\xf6\xe1\xc7\xcf\xc7\x4f\x70\x96\xe0\x1f\xfe\x1b\x37\x71\x18\xa7\x64\x17\x95\x87\xb1\x90\x11\x97\x62\xd3\x0f\xe3\xdd\x30\xc0\x7b\x2c\xce\x80\xe0\x5c\xa0\x16\xb2\x30\x2d\x20\x67\x82\xe2\x84\x60\x18\xb6\xb8\xf3\xbb\x87\xf1\xa4\xbf\xf5\x90\xc1\x78\x2c\xe5\xfe\xe8\x09\xed\x51\x1d\x79\xb7\x77\xb5\x63\x7f\x45\xbe\xd8\xf4\x12\xc1\x45\x5b\x8d\x82\x17\x59\x3c\x95\x8e\xab\x29\xa8\x59\xfa\x99\x64\x49\xb5\x5d\xec\x88\x93\x4f\xe6\xf2\xab\x26\x51\xdb\x86\x3e\x9e\x6e\x6c\x6b\x4c\xf5\xab\x3c\x8c\xde\xfd\x89\xa2\x96\xee\x5a\x95\xdb\x1e\xdb\x81\xe9\xaf\xc2\x4c\x7b\xce\x35\x7b\x3c\xed\x15\xfa\xa5\x3e\x27\x0e\x05\x74\x3c\x61\x9f\xd8\xf5\x36\x4f\xea\xd8\xb3\x5d\xcc\x55\x40\x96\x4c\xf7\x47\xa1\x57\x39\xbe\x61\xcf\x3a\xc4\x97\xc4\xf6\x2d\x5f\xa9\x53\x70\x3d\xab\x21\x20\x53\x1b\x55\x57\xb7\xde\x7a\xc9\xde\xdd\x23\xbb\x12\xbe\x7c\xdf\xde\xe8\x76\xd4\x4c\xfd\xdd\x30\xce\x15\x67\x1a\xfe\xbf\x16\x68\xb7\xff\xa7\x57\x39\x93\x31\x5e\xdd\x92\x2e\xa4\x87\x14\x02\x45\x81\xcc\xc9\xa7\x19\x6c\x32\xad\x6f\x30\x16\x05\x21\xd7\x68\xa4\x62\xa3\x19\x44\x0c\xa4\xe9\x86\x5a\x68\x26\x96\xa5\x51\x0d\xa6\x94\x94\x3d\xea\xae\x61\x22\x56\xb8\x58\x04\x15\xaf\x2c\x61\x4a\x1e\x2c\x79\x92\x46\x17\x95\x46\x12\x03\x8a\xf0\xd0\xb0\x94\x41\xec\xe2\x0c\xe6\x8c\x0c\x53\x75\x5e\x5c\x63\x57\x51\x64\x8d\x6f\x15\xb0\xc5\x6b\x6f\x4e\x4b\x55\xf6\x1b\xe5\x14\x80\xeb\x2a\x14\xe7\x19\x7d\x25\xb8\xd0\xd2\xa6\x0f\x4f\xad\xdb\xd6\x2a\xd3\x4c\xaf\xe0\x42\x4e\xbc\xf6\xf2\x8c\xec\x70\xd2\x24\xed\xc8\xea\x7b\xa3\xd7\x3d\xd9\x80\x1b\xeb\xdb\x50\xae\x5c\x59\xd9\xb3\xbd\xc8\xce\x20\xf5\xf7\x45\x53\xd2\xae\xdb\xa7\x2b\xb4\x6e\xe3\xef\x00\x00\x00\xff\xff\x6c\x75\x08\x89\xa5\x03\x00\x00")

func viewsUncssHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsUncssHtml,
		"views/uncss.html",
	)
}

func viewsUncssHtml() (*asset, error) {
	bytes, err := viewsUncssHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/uncss.html", size: 933, mode: os.FileMode(420), modTime: time.Unix(1436870288, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/article.html": viewsArticleHtml,
	"views/article_edit.html": viewsArticle_editHtml,
	"views/article_form.html": viewsArticle_formHtml,
	"views/article_list.html": viewsArticle_listHtml,
	"views/fortune.html": viewsFortuneHtml,
	"views/index.html": viewsIndexHtml,
	"views/layout.html": viewsLayoutHtml,
	"views/login.html": viewsLoginHtml,
	"views/uncss.html": viewsUncssHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"article.html": &bintree{viewsArticleHtml, map[string]*bintree{
		}},
		"article_edit.html": &bintree{viewsArticle_editHtml, map[string]*bintree{
		}},
		"article_form.html": &bintree{viewsArticle_formHtml, map[string]*bintree{
		}},
		"article_list.html": &bintree{viewsArticle_listHtml, map[string]*bintree{
		}},
		"fortune.html": &bintree{viewsFortuneHtml, map[string]*bintree{
		}},
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{
		}},
		"layout.html": &bintree{viewsLayoutHtml, map[string]*bintree{
		}},
		"login.html": &bintree{viewsLoginHtml, map[string]*bintree{
		}},
		"uncss.html": &bintree{viewsUncssHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

