// Code generated by go-bindata.
// sources:
// views/.layout.html.swp
// views/article.html
// views/article_edit.html
// views/article_form.html
// views/article_list.html
// views/fortune.html
// views/index.html
// views/layout.html
// views/login.html
// views/uncss.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsLayoutHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\xbf\x8f\x1c\x35\x1b\xc7\x9d\xb7\x7a\x57\x90\x80\x48\x43\x83\xe4\x0c\xc5\xee\xa2\xd9\x71\x2e\x97\x5f\xe4\x66\x56\x24\xb9\x4b\x14\x41\x2e\x08\x25\x11\x70\xba\xc2\x3b\xf3\xec\xac\x73\x9e\xf1\x64\xec\xb9\x61\xb9\x3b\x90\xd2\x22\x82\x44\x03\x1d\xd4\x88\x8a\x06\xd1\xd0\x80\xf8\x03\x68\xe8\xa0\xa0\xa4\x80\x8e\x96\xc7\x33\xbb\x77\x97\xe4\x94\x43\x14\x44\x48\xfe\x48\xdf\x1d\x8f\x1f\xfb\xf1\x63\xfb\xb1\xa3\xe8\x66\x74\xf2\xf6\xb5\xeb\xf4\x5c\x70\x9a\x20\xcf\x12\xb2\x78\xef\x85\xdb\xf7\xc9\x15\x32\x5a\x20\x04\x64\x2d\x72\x5e\x92\xc3\xc8\x78\x39\x92\x70\x68\x33\xf2\xde\xcc\x21\x4b\x60\x13\xa4\x2a\x32\xc8\x0d\x9b\xd7\x6d\x0a\xa8\x35\x93\x7c\xaa\x2a\x13\x4c\x4c\x26\x0f\xf7\xe7\x70\x38\xfe\x26\x95\x19\x0f\xce\x1f\x25\x8b\xa7\x16\x4e\xda\xd7\x17\xbd\x13\xf4\xf8\x73\xb7\x9e\x74\x54\x0e\x87\xc3\xe1\x70\x38\x1c\x0e\x87\xe3\x5f\xc4\x14\x47\xc8\xfb\xf8\xfc\xdf\xec\xdd\x9f\x3d\x8f\x3c\xf4\x74\x38\x1c\x0e\x87\xc3\xe1\x70\x38\x1c\x0e\x87\xc3\xf1\xdf\x85\x27\x84\x7c\xf7\x7f\x42\x3e\xea\x90\xe6\xef\xff\xf3\xff\xff\xff\xf1\x0c\x21\xbf\xa0\x7e\x42\x7d\x8b\xfa\x18\xf5\x36\xea\x38\xea\xb7\x63\x84\x7c\x85\xfa\x00\x75\x0f\xf5\x2e\x4a\xa1\x5e\x45\x5d\x42\xbd\x8c\xfa\xfd\x28\x21\xdf\xa0\x0c\x6a\x15\xe5\xa1\x9e\x47\x1d\x43\xfd\xfc\x34\x21\x3f\xa2\x7e\x40\x7d\x8d\xfa\x02\xf5\x19\xea\x0a\xea\xd7\xa7\xd0\x86\xfa\x14\xf5\x21\x6a\x15\xb5\x8c\x3a\x8f\x1a\xa0\xfe\xc4\x38\xbf\x47\x7d\x89\xfa\x1c\xf5\x49\xa7\x8d\xfd\x7e\xe7\x49\xae\xa2\xc3\xe1\x70\x38\x1c\x0e\xc7\x3f\x26\x64\xf6\xd3\xc7\x21\xe9\x84\x6c\xa4\x92\x29\x16\xb0\xa4\xe3\x52\x14\x66\x48\x52\xde\xeb\x6a\xc8\x93\xae\x4f\xbb\x05\x4f\xc1\x7e\x32\xd9\xed\x2f\x35\xf5\x71\x09\xdc\x80\xb5\x6c\x6d\xd1\xe0\xb2\xca\xc7\x22\xad\x4a\x6e\x84\xca\x83\xab\xd7\x96\x29\xdd\xd9\xb1\x46\x5e\x19\x65\xbb\xf4\xc6\x55\x1e\x5b\x63\x4f\xf8\xda\x57\x7e\xea\x97\x3e\xf7\xb3\xfe\x96\x58\xeb\x5e\x55\x2a\x95\x70\x31\xe7\x72\x6a\x44\xac\x6f\x8c\xee\x40\x6c\xba\xeb\x51\xb9\x24\xd6\xca\xf5\xc8\xfe\x6c\x6f\xef\xf6\xef\x6f\xf5\x6c\x4d\x70\x37\x6a\x1f\xdb\xdb\x6b\xeb\xfd\xa0\xa8\xf4\xa4\xc7\xcb\xb4\xb2\xdf\x78\xea\xfe\x8e\xdf\x18\x65\xb4\xf0\x52\x0e\x35\x5d\xc6\x50\x7b\xfd\x25\x1e\xe9\xa0\x8d\x7b\x45\x82\x6d\xd8\x53\x7d\x3f\xc3\xca\x14\xcc\xac\x46\x5f\x9a\xde\xe4\xe9\x2a\xcf\x00\x6d\x6b\x27\xd7\x97\x78\xc0\xf5\x34\x8f\xa3\x05\x2c\xe9\x32\x8e\xd2\xa5\x2c\x28\x78\x89\x4d\x57\x55\x02\x81\xc8\x35\x94\xe6\x12\x8c\x55\x09\x3d\x3b\xa1\x9d\x7e\xaf\x16\x79\xa2\x6a\x3f\x51\x71\x13\x8d\xdf\x6d\xd7\xb3\xeb\x77\x19\xab\xeb\x3a\x48\x9b\xf9\x0e\xf8\x7c\xc2\x41\xac\x32\xb6\xf7\x76\x47\x63\xcb\x94\xdb\x55\xc3\xcd\x98\xef\x85\xdd\x97\xb1\x52\x06\xca\x21\xc1\x15\xc7\x5d\xc1\x15\xc6\xda\x4e\xc8\xe9\xa4\x84\x71\xe4\x31\xa9\x52\x91\x7b\xc3\x50\x17\x3c\xa7\xb1\xe4\x5a\x47\xde\x98\xd3\x31\x1f\x54\xb9\x54\xf1\xc6\x80\x4b\x83\x66\x66\xed\xf8\xe0\xad\x23\xa9\xe1\x20\x4f\xaa\x32\x07\xba\xb2\x8e\x1e\x71\x22\xc6\x34\x78\x4d\xa5\x29\x3c\x12\xd4\xc4\x98\xe2\x02\x63\x77\x44\xaa\x79\x1d\xd4\x8b\x81\x2a\x53\x16\x6b\x3d\xd8\xe4\x52\x24\xdc\xa8\x92\xc5\x13\x88\x37\x18\xb6\x86\x12\xca\x03\xc7\xc4\xf6\x8b\x0f\x8e\x79\xc0\x10\xbb\x0e\x77\x47\x39\xd4\xaf\x4d\xfd\x33\x0f\x3b\x0e\xe7\xab\xdc\x9c\x04\x68\x92\xae\x19\x10\xe7\x39\x15\x20\x67\x53\x0c\xf7\x99\xf0\x10\x01\x4f\xda\x3e\x9d\xb0\x98\x0f\x62\x2b\xa5\xc8\xc1\x1b\x5e\x17\xb9\xc8\x30\x3e\x6d\xe8\x68\x4a\x13\xd0\x22\xcd\x43\x56\xb4\xed\x59\xce\x37\x9b\x12\x16\x2b\xd9\x96\x3a\xa1\x14\xc3\xdd\x19\x62\x72\x99\xca\xfa\xb9\xd2\x16\x6c\xa4\x21\xc3\x16\x07\xb4\xc5\xf4\x4e\xbc\xe1\x1b\xf8\xfb\xb8\x56\x19\x17\xd2\xa8\x0b\xa5\xc2\x42\x1e\x8c\x78\x95\x56\xf0\xca\xec\xcb\x68\x9b\x8e\xde\x10\x4f\xb4\xe1\xb1\x79\x9c\x13\xc6\x52\x61\x26\xd5\xa8\xc9\xdf\x59\x67\xdb\x31\x79\x6c\x80\x8c\x69\x74\xbc\xa1\x36\xa1\x1c\x4b\x55\x37\x9d\x2b\x3c\x44\x9a\x2d\x9e\x3e\x77\xea\xec\x99\xb3\x7b\xae\x2e\xea\x8d\x07\x3d\x85\xb3\xf5\x09\xe7\x4b\x16\x4e\x16\xf6\x79\xf6\x86\x2b\x6d\xd7\xb6\x17\xda\xec\xe6\xec\xee\x4d\x38\xbb\xe1\xda\xed\x1a\xee\x9d\x2e\xda\x1c\x71\x6a\x8f\xb7\xc7\x8b\x02\x4f\x60\x93\x14\x7b\x27\x0f\x77\x71\x83\x96\x20\x23\x4f\x9b\xa9\x04\x3d\x01\x30\xde\x6c\x54\xdb\x01\x13\xd4\xa3\x66\x5a\x40\xe4\x19\x78\xc7\xd8\x04\xf7\x9a\x8e\x46\x18\x09\xf3\xa8\xe8\x80\xda\xbb\xf2\xa6\xad\xc3\x24\x0a\x59\x6b\xb5\xed\x32\x30\x9c\xe6\x78\xeb\x44\x9e\xbd\x64\x0b\xdc\x67\x8f\xc6\xb8\x05\x78\x7f\x44\x5e\x2d\x12\x33\x89\x12\xbc\x7f\x63\x18\x34\x2f\x3e\xc5\x8c\x32\x82\xcb\x81\x8e\xb9\x84\x68\xc1\xdb\x73\x63\xcf\xc3\x00\xee\x56\x62\x33\xf2\xde\x1c\xdc\xba\x38\xb8\xac\xb2\x02\x2f\xe6\x91\x84\x7d\x3e\xaf\xad\x44\x90\xa4\xd0\xf6\x1b\x71\xbc\x04\xda\xe9\x3c\x7a\x9b\x2f\x37\x49\x82\x01\xef\x1b\x23\x9e\xf0\x52\x03\xba\x69\xbe\xf2\xb5\x86\xb0\x5d\xd3\xd0\x9e\x29\x2a\x79\x9e\x46\x1e\xe0\x65\x44\xc2\x13\xcb\x37\x2e\xdf\x7c\xeb\xf5\x15\xda\xfe\x43\xf3\x57\x00\x00\x00\xff\xff\x6b\x71\xf3\xad\x00\x30\x00\x00")

func viewsLayoutHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutHtmlSwp,
		"views/.layout.html.swp",
	)
}

func viewsLayoutHtmlSwp() (*asset, error) {
	bytes, err := viewsLayoutHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/.layout.html.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1444774455, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsArticleHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x41\x6a\xf3\x30\x10\x85\xd7\xfe\x4f\x31\x88\x7f\x1b\xc9\xc9\xa2\x2b\x27\x90\x4d\x69\x21\x81\x42\x73\x81\x69\x3c\xb6\x04\xaa\x6c\x24\xb9\x25\xa4\xb9\x7b\x25\xd9\xb1\x21\x35\x24\x2b\x7b\xde\x9b\x79\xdf\x8c\x7d\x3e\x83\x32\x92\xac\xf2\x0e\x98\xc6\x53\xd3\x79\x06\x97\xcb\xbf\xa0\x7f\x2b\x2f\x81\x6f\xad\x57\x47\x4d\x51\xcb\xb2\xac\x90\xcb\x4d\xb0\xf8\x41\xf9\xa4\x15\x22\x08\xc9\x68\xe1\xa8\xd1\xb9\x35\xd3\x84\x25\x4b\x4d\x6f\xdd\x87\x56\x4e\x52\xb9\xf5\xf0\x03\xcf\x8d\xfd\x44\x0f\x6c\x95\xe7\x4f\x3c\x5f\xf2\x7c\xc5\x52\x40\x9b\xe6\x63\xff\x1e\xad\x93\xa8\x5f\x0e\xfb\x5d\xc2\xc5\xdd\x2a\xf8\xcf\x77\x4d\x5d\x53\x79\xdd\xc0\xe0\x57\x9c\xe8\x4d\xfe\xea\x46\xca\xd0\x90\x15\x08\xd2\x52\xb5\x66\x02\xfb\xdd\x45\x0c\x7f\xd7\x5d\x1d\x3a\x44\x67\xda\x7e\x80\x81\x8f\x47\xac\xd9\xa4\x6c\x0a\xd7\xa2\xb9\x1e\x52\x21\x54\xb8\xa0\x13\x2d\x5c\x10\xa2\x2b\xa2\x1d\x1e\x38\x2c\x40\xda\xd1\x63\xd4\x5b\xe6\x1d\xe2\x1c\xcb\x3c\x78\x20\x95\xca\x8f\x9c\x54\xcc\x41\x5a\x32\x47\xa5\x6f\x39\xf7\xb2\x4b\xd2\xe4\x69\x4c\x1f\xca\xb9\x7c\x6f\xc3\x27\x5b\x34\x7f\x00\x85\xe8\xff\xdf\x74\xd1\xf4\xf6\x1b\x00\x00\xff\xff\xf8\xed\xfc\x25\x8c\x02\x00\x00")

func viewsArticleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticleHtml,
		"views/article.html",
	)
}

func viewsArticleHtml() (*asset, error) {
	bytes, err := viewsArticleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article.html", size: 652, mode: os.FileMode(420), modTime: time.Unix(1444774128, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsArticle_editHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcb\x4e\xf3\x30\x10\x85\xd7\xf9\x9f\xc2\x9a\x7f\x4d\x43\xf7\x49\x24\x16\xac\x41\x4a\x5f\x60\x88\x87\x64\x24\xe7\x82\x3d\x6e\xa9\xaa\xbe\x3b\xb6\x43\xaa\xde\x10\xec\x92\x6f\x8e\xcf\x39\x23\xcd\xe1\xa0\x78\xe8\xc8\xb2\x38\x05\x06\xf7\xa3\x17\x50\xc7\xe3\xbf\xc0\x77\x2c\x9d\x5a\x3d\x59\xe1\xc6\x50\x64\x59\x96\x15\xdd\xba\x7a\xd6\x2c\x0a\x67\x5c\xe4\x01\xa4\xc1\xfb\x68\x7b\xd5\x93\x74\xa3\x2e\xe1\xf5\xa5\xde\x40\xe2\x59\xc1\xc3\xe4\x45\xc9\x7e\xa2\x12\x84\x3e\x83\x3d\x07\x85\xb0\x18\x02\x35\x60\x4f\xa7\x9f\xc9\x60\x43\xdd\x68\x34\xd9\x12\x36\x33\xdb\xa2\xf1\x41\x11\xea\xac\x12\x09\x3d\x40\x59\xfa\xf0\x6c\x49\xff\x98\xd0\x18\x74\xae\x04\x67\x7c\x0b\x4a\xa3\xe0\x83\xa0\x6d\x49\x4a\xf8\x7f\x11\x3c\x0b\x2e\x72\xeb\x84\xce\x62\x23\xf8\x5b\xea\xf7\x32\xd8\x1a\x1e\x6e\xd6\x59\xe8\xf9\x42\x33\xbb\x67\x1e\x0d\xd1\x12\x2e\x9e\xc9\xdf\x8e\xbb\xb0\xd4\xfa\xf1\xda\x3a\x0e\xab\x64\x18\xbe\x82\x5b\x91\x2f\xcf\x7f\xaf\xea\x6e\x7b\xba\xeb\x92\x2e\x36\xbc\x63\xe5\xfc\x5b\xcf\x72\x52\xd7\xb8\xa5\x59\x56\xe4\xf1\x1a\xaa\x78\x44\x34\xe8\x78\x3a\x5f\x01\x00\x00\xff\xff\x19\x16\x2d\x3b\x67\x02\x00\x00")

func viewsArticle_editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_editHtml,
		"views/article_edit.html",
	)
}

func viewsArticle_editHtml() (*asset, error) {
	bytes, err := viewsArticle_editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_edit.html", size: 615, mode: os.FileMode(420), modTime: time.Unix(1444771507, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsArticle_formHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xc1\x6e\xb3\x30\x10\x84\xcf\xe4\x29\xac\xfd\xcf\xbf\x68\xee\x36\x97\xde\xdb\x4a\xc9\x0b\x6c\x61\x0b\x96\x16\x4c\xd7\xeb\xa6\x51\x94\x77\xaf\x81\x52\x29\x49\xab\x1c\x77\x98\xf9\x66\x84\x4f\x27\xe3\x87\x8e\xc4\x6b\x34\xc0\x78\x0c\x49\xc1\x9c\xcf\x9b\xa2\x28\x6c\xb7\xad\x9e\xe8\x60\x50\xd4\xd7\x4c\xb6\xcc\xf7\xac\xbf\x05\xe9\x4d\x4f\xda\x85\xc6\xc1\xcb\xf3\x6e\x0f\xb3\x5e\x58\x3f\x8c\x49\x8d\x1e\x47\x72\xa0\xf4\x99\x49\x3e\x3b\xd4\x2b\x13\x98\x01\x7b\xfa\x39\x46\xc6\x9a\xba\xc0\x0d\x89\x83\xfd\xa2\x09\xbd\x27\x2f\xd4\xfc\x09\xab\x19\x63\x74\x10\x39\xb5\x60\x1a\x54\xfc\xaf\x28\x2d\xa9\x83\x7f\x17\x1d\x8b\xe1\xa2\x62\x37\x4b\x77\x1b\xbe\x37\x62\xcb\x7e\xb8\x59\xb9\xaa\x57\x94\x29\x89\x42\xb8\x86\x67\x90\x84\x43\x5e\xba\x7d\xb8\x66\x4c\x1f\x2b\x5b\xae\x99\xfb\x43\xe2\xed\x8a\xf8\xdb\xef\x8e\xe9\xb5\xf7\x39\xf8\x81\x9c\xf2\xf9\x98\xe1\x4a\x8b\xd1\x96\xd3\x83\x55\x9b\xaf\x00\x00\x00\xff\xff\xbb\x62\xfe\xb8\xeb\x01\x00\x00")

func viewsArticle_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_formHtml,
		"views/article_form.html",
	)
}

func viewsArticle_formHtml() (*asset, error) {
	bytes, err := viewsArticle_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_form.html", size: 491, mode: os.FileMode(420), modTime: time.Unix(1444771565, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsArticle_listHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcf\x6a\xe3\x30\x10\xc6\xcf\xf6\x53\x0c\x22\x57\x5b\x4e\x0e\x7b\x52\x04\xb9\x2c\x2c\x2c\xcb\x42\xfb\x02\xaa\x3d\xb6\x05\xaa\x64\x24\xb9\x21\xa4\x79\xf7\x4a\xfe\x97\xa6\x35\x4d\x6e\x9e\x99\x4f\xf3\xfb\x66\x3c\xe7\x33\x48\xdd\xa2\x95\xde\x01\x51\xe2\x64\x7a\x4f\xe0\x72\x49\x93\x24\x61\xed\x96\x1f\xac\x97\xa5\x42\x17\x44\x20\xb4\xc7\xac\x6c\xad\xd1\x46\x99\x46\x96\x42\x81\xb1\x15\x5a\x46\x83\x30\x4d\x62\xa7\x1a\xf2\xbf\xa6\x69\xb0\x9a\x5b\x74\x9c\x09\x68\x2d\xd6\x7b\x42\x8f\x01\x82\x84\xff\xc3\x23\xa3\x82\x33\xda\x8d\x8f\x50\x2f\xea\x5e\x41\xa9\x84\x73\x7b\x22\x26\x2e\x19\x35\x56\xe8\x06\x21\x5f\xdc\x0c\xfa\x11\x68\x2c\x6c\x66\x68\xfe\xc7\xfd\xef\x5f\x94\x74\xed\xe2\x20\x61\x4a\xf2\xe1\x23\xea\xf3\xa5\x7c\xf0\xf0\x0e\xbf\x8d\x7d\x15\x1e\xc8\xae\x28\x7e\xe5\xc5\x36\x2f\x76\x71\x76\xa0\x70\x35\x3d\x19\xa1\xf1\xf1\x93\xea\x9b\x50\x27\xe0\xa5\x57\xb8\x27\x31\xf7\x2c\x1a\x25\x35\xc6\x34\x1f\xe2\x58\x0a\x51\x1c\x31\x4d\x66\x93\x9b\xdb\xb5\x04\x57\x5a\xbc\x8d\xb6\xa6\xb5\xad\x38\x0f\xaa\x9f\x6c\xd0\x5e\x77\xe3\x93\xc5\xd0\x35\xc3\x99\xeb\x84\x9e\xb7\x59\x0b\xa8\x45\x86\x27\xcc\x5c\x48\xc4\x2a\x8d\x65\x3e\x9b\x1c\x7e\x83\x72\xf8\x28\xf9\x2b\xf7\x0e\x75\x9d\xa7\x1f\x1e\x14\x2b\xe9\x17\xd6\x10\xac\x81\x3a\xd4\xa5\x54\xdf\x59\xf7\xba\x57\xa8\x30\xdc\xe5\xdc\x7f\x0a\xd7\x08\xde\x86\xe5\x65\x66\x05\xc1\xe8\xfc\x3f\x6f\x27\x63\x74\xbc\xbe\x4f\xd9\xdb\x8b\xa7\xbd\xe2\xe9\x47\x00\x00\x00\xff\xff\xf9\xa2\xeb\x58\x84\x03\x00\x00")

func viewsArticle_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_listHtml,
		"views/article_list.html",
	)
}

func viewsArticle_listHtml() (*asset, error) {
	bytes, err := viewsArticle_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_list.html", size: 900, mode: os.FileMode(420), modTime: time.Unix(1444773984, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsFortuneHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\xc8\xcc\xcb\x48\x2d\xca\x2c\x29\x56\x50\xca\x49\xac\xcc\x2f\x2d\x51\x52\xa8\xad\xe5\x02\x8a\x97\x67\x96\x64\x28\xe8\x05\x96\xe6\x97\xa4\x82\x44\x38\x39\x39\x6d\x32\x0c\xed\x94\x81\x32\x7a\x9e\x2e\x40\x11\x1b\x7d\x20\x17\x2c\x9c\x94\x93\x9f\x9c\x5d\x08\x52\x08\xe6\x73\x82\x94\x84\xa4\x56\x94\x40\xb5\x71\xda\xa4\xe5\x03\xe5\x8a\xec\x40\xe2\x8e\xa5\x25\x19\xf9\x45\x60\xed\x50\x51\xb0\x11\xfa\xc8\x66\x00\xd5\xa5\xe6\xa5\x80\x74\x03\x02\x00\x00\xff\xff\xbf\x47\x28\xbe\x9f\x00\x00\x00")

func viewsFortuneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsFortuneHtml,
		"views/fortune.html",
	)
}

func viewsFortuneHtml() (*asset, error) {
	bytes, err := viewsFortuneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/fortune.html", size: 159, mode: os.FileMode(420), modTime: time.Unix(1444771638, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xcf\x31\x6b\xf3\x30\x10\xc6\xf1\xd9\xf9\x14\xc7\xcd\x8e\x1d\x0f\xef\x90\x17\x5b\xd0\xd2\xb5\x50\x4a\xa1\xf3\xd9\xb9\xda\x2a\xb2\x4e\x48\xe7\x80\x08\xf9\xee\x95\x3b\x94\x42\x37\xf1\xe7\x81\x9f\xee\x76\x03\xeb\x17\x8e\x56\x13\xa0\xa3\x2c\x9b\x22\xdc\xef\x87\xaa\xaa\xfa\xa5\x33\xef\xec\x26\x59\xb9\x6f\xcb\xfb\xbb\x05\xb8\xca\x44\xe3\x80\x8b\x6a\xf8\xdf\xb6\x69\x5a\x78\xa5\x46\xe2\xdc\x22\x68\x0e\x2c\x1f\x03\xbe\x70\x4c\xe2\xd1\x3c\x67\xf0\xb4\x32\xd8\x04\x7d\x0a\xe4\x21\x44\x09\x1c\x35\x0f\xb8\x77\x34\xaf\xb2\x92\xf5\xf0\x48\xdb\xbc\x15\x64\xdf\x98\x1a\xfa\x95\x95\x7e\x6d\x47\x1b\x75\x79\x22\x65\x84\x49\xbc\xb2\xd7\x01\xbb\xf3\xf9\x74\xec\xba\xe3\xe9\x1f\x9a\x72\x43\xf3\x30\x73\xf9\x36\x64\xa6\x98\x40\xdc\xa5\xfe\x23\x7e\xca\xf8\x66\xd5\x15\xf5\xc2\x57\x76\x7b\xfe\x11\x03\xa5\x64\xc5\x17\xa2\x06\x47\x05\xb1\x53\xd3\xb7\xc1\x1c\xbe\x02\x00\x00\xff\xff\xed\x8f\xcc\x09\x1f\x01\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 287, mode: os.FileMode(420), modTime: time.Unix(1444771445, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x5f\x6f\xdb\x36\x10\x7f\x4e\x3e\x05\xa7\x17\xdb\x83\x24\x2e\xcb\xda\x0d\x8d\x64\x2c\x4d\xb2\xa2\xc0\xd6\x0e\x43\x06\x6c\x08\xf2\x70\x96\x4e\x14\x13\x8a\x54\x49\xca\x9a\x91\xe4\xbb\xef\x48\xd9\x71\x8a\x04\x41\x5f\x2c\x92\xf7\xbb\xdf\xfd\x3f\x17\xdf\x9d\x7f\x3e\xbb\xfc\xf7\xcf\x0b\xd6\xfa\x4e\x2d\x0f\x8b\xf0\x61\x0a\xb4\x28\x13\xd4\xc9\xf2\xf0\xa0\x68\x11\x6a\xfa\x1e\x14\x1d\x7a\x60\x55\x0b\xd6\xa1\x2f\x93\xc1\x37\xd9\x2f\x49\x14\xac\xc0\x21\x6b\x2d\x36\x65\x72\x77\xc7\xf2\x33\xa3\x1b\x29\x06\x0b\x5e\x1a\x9d\x9f\x9b\x0e\xa4\x66\x0f\x0f\xc9\x9e\xa4\xf5\xbe\xcf\xf0\xcb\x20\xd7\x65\xf2\x4f\xf6\xf7\x69\x76\x66\xba\x9e\xe0\x2b\x85\x09\xab\x8c\xf6\xa8\xc9\xc2\xc7\x8b\x12\x6b\x81\x4f\xf4\x34\x74\x58\x26\x6b\x89\x63\x6f\xac\x7f\x02\x1d\x65\xed\xdb\xb2\xc6\xb5\xac\x30\x8b\x97\x94\x49\x2d\xbd\x04\x95\xb9\x0a\x14\x96\x47\x13\x8d\x97\x5e\xe1\xf2\x42\x8d\x52\x83\x65\x19\x0b\xfe\x5e\x86\x37\x72\xb0\xe0\x93\x34\xe0\x94\xd4\xb7\xcc\xa2\x2a\x13\xe7\x37\x0a\x5d\x8b\x48\xf6\xa6\x18\xa1\xef\xf3\xca\xb9\x84\xf9\x4d\x4f\xee\x78\xfc\xcf\xf3\x70\x8f\x8a\xae\xb2\xb2\xf7\x0c\xdc\x46\x57\xcc\xd9\x6a\x82\xdf\x90\xb4\xe0\x93\x2c\xe4\x94\x6f\x93\x5a\xac\x4c\xbd\x89\x7a\xe1\x01\x6d\x38\xd2\xf9\x68\x59\xc0\xd6\x18\x4f\x76\xde\x16\x1c\x88\x83\x64\x11\xa3\x61\x1d\x0f\x07\xc5\xa0\xa6\x43\x70\xfa\x89\x1e\x77\x1e\xaa\x5b\xb3\x46\xdb\x28\x33\xe6\x95\xe9\xf8\xe0\xd0\x3a\x7e\xfc\xd3\xcf\x3f\xbe\x7d\xf3\x96\xe3\x44\x9b\x2c\x4f\xdd\xed\xc4\x4d\xfa\x2f\x32\x09\xe9\xdb\x61\x15\x29\x1e\x95\xce\x4c\x8d\xaf\x69\x51\xd1\x95\x37\xef\x6c\xac\x7e\xbe\x82\x41\x0c\xf8\xeb\x56\x3b\x30\x05\x06\x4d\x1e\xfa\xd7\x48\x2c\x25\x25\x59\xfe\x45\xbf\xaf\xa1\x1a\xea\x85\x41\x53\x9f\xfc\x36\x1d\xbe\xc6\x16\x7c\x9b\xa0\x82\xef\x72\x56\xf4\xac\x52\xe0\x5c\x99\x84\xac\x53\xa9\x49\xf7\x0f\x6a\x97\x0e\x94\x74\x9e\xad\x36\xac\x46\x27\x85\x2e\x78\x1f\x6b\xc3\xf7\xc5\x29\x1c\x56\xa1\xad\x23\x0f\x35\xcf\x46\xa2\xaa\xa9\x77\x22\xec\x89\xac\x68\x8c\xf1\xbb\x7a\xee\x1c\x0d\x6d\xff\x8e\xf3\x35\x99\xa9\xc1\x1b\x9b\x8f\xc7\xb9\xb1\x82\x57\x2d\x56\xb7\x9c\x20\x68\x91\x52\x5b\xb8\x1e\xf4\xce\xc3\x06\x58\x03\x59\x98\xca\x37\xb1\x85\x48\xb4\x0c\x01\xbe\x44\x7c\x23\x85\x83\xf1\x91\xd5\xb9\xec\xd1\xd4\x37\xd8\x20\xfc\xf1\xd7\x26\x28\x3e\xd9\xb0\xfc\x77\x23\x04\x6e\x83\xdc\xdb\xe4\xca\x08\x33\xf8\x17\xa9\x94\xa9\x6e\x9f\x51\xa1\x72\xf8\x12\x89\xd4\x2f\x72\x0c\x3a\xb0\x64\xa0\xfc\x73\x26\xfd\x98\xf2\x7d\x9a\x8b\xdd\x74\xcd\x9b\x41\xc7\x3a\xcc\x65\xea\x52\x93\x8a\xd4\xa6\x90\x76\x8b\x3b\x79\x35\xfb\x60\x8c\x50\x78\xaa\x41\x6d\xbc\xac\xdc\xe7\xd5\x0d\x95\x6c\x76\x5d\xda\x13\x79\x65\xaf\xcb\xf0\x73\x7f\xff\xa8\xbf\xb8\x9b\x87\x97\xfc\x4b\x39\x7d\xee\xef\xaf\xae\x17\x79\x3f\xb8\x76\x0e\x56\x0c\x1d\xad\x1e\xb7\x78\x48\xa3\x50\x95\x47\xdf\x6b\x1c\xd9\x39\x78\x9c\x2f\x4e\xa0\x74\x79\x45\xed\xeb\xf1\x42\x61\x00\xce\xcd\x22\xed\xe8\x51\xa0\xdf\xbe\xb8\xf7\x9b\x4b\x10\x9f\x68\xa5\x91\xec\xea\x87\xeb\x13\xc8\xe3\xd6\x28\x8f\xe8\x14\x36\x87\x38\xe9\xf2\x1e\x2c\x41\x3f\xd1\xb0\xe5\x52\xd3\xf8\xfa\xf7\x48\xed\x8e\xf3\x10\xd0\xc3\x62\x4e\xe3\x54\x9b\x31\xad\x4d\x15\xbd\x49\x67\x53\x12\x66\xe9\x8c\xf3\x71\x1c\x73\x11\xe3\xcd\x60\x17\x70\x9c\xe1\xfd\xed\xc6\x11\x52\xc0\x6c\x71\x72\x28\x60\x3e\x9b\x1c\x9e\xa5\x6c\xf6\x7c\x8d\x7f\xf8\x78\xce\x28\xe9\x41\x08\x83\x37\x3b\x15\x47\xb5\x08\x6f\x3d\x08\x0c\x7b\x39\xbc\xc7\x51\xd8\xaf\xba\x69\xc5\xd1\x10\xc5\x3f\x98\xff\x03\x00\x00\xff\xff\x99\x89\x94\x25\x71\x06\x00\x00")

func viewsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutHtml,
		"views/layout.html",
	)
}

func viewsLayoutHtml() (*asset, error) {
	bytes, err := viewsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/layout.html", size: 1649, mode: os.FileMode(420), modTime: time.Unix(1444774451, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x51\x0a\x02\x21\x10\x40\xbf\xdd\x53\x0c\x73\x81\xa5\x7f\x77\x4f\x10\x14\xd4\x05\x2c\x2d\x05\x75\x44\xc7\x62\x59\xf6\xee\x99\xd1\x47\xd0\xdf\xbc\xc7\xcc\xf0\xd6\x15\x5c\xb4\x26\x3b\x2e\x80\x5e\x2d\x54\x19\x61\xdb\x06\x21\x84\xb4\xbb\x79\x4f\x77\x17\xe5\xd8\xa6\x6e\x6e\x94\x03\x04\xc3\x96\xf4\x84\xc7\xc3\xe9\x8c\xdd\x0b\xe9\x62\xaa\x0c\xbc\x24\x33\x61\x52\xa5\x3c\x29\x6b\x84\xa8\xc2\x0f\x27\xaf\xae\xc6\x92\xd7\x26\xb7\xf3\xaf\xfe\xf3\xa2\xd4\x4b\x70\x2d\xe4\xa1\x7c\x6d\xd8\x2b\x3e\x7b\x72\x7c\x37\xcc\xc3\x2b\x00\x00\xff\xff\x3b\x06\x1c\x24\xb8\x00\x00\x00")

func viewsLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLoginHtml,
		"views/login.html",
	)
}

func viewsLoginHtml() (*asset, error) {
	bytes, err := viewsLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/login.html", size: 184, mode: os.FileMode(420), modTime: time.Unix(1444771694, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsUncssHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\xcb\x6e\xdc\x3a\x0c\x5d\xcf\xfd\x0a\x66\x96\x17\x30\x06\xdd\x3b\x59\xf4\xb5\x28\x50\x34\x40\xbb\xe9\x92\x96\x18\x8f\x30\x7a\x95\xa2\x92\xf8\xef\x4b\xd9\x1e\x61\xd0\xa6\x0b\x9b\x14\x1f\x87\x14\x75\x38\xde\x7d\xfc\xf6\xe1\xc7\xcf\xc7\x4f\x70\x96\xe0\x1f\xfe\x1b\x37\x71\x18\xa7\x64\x17\x95\x87\xb1\x90\x11\x97\x62\xd3\x0f\xe3\xdd\x30\xc0\x7b\x2c\xce\x80\xe0\x5c\xa0\x16\xb2\x30\x2d\x20\x67\x82\xe2\x84\x60\x18\xb6\xb8\xf3\xbb\x87\xf1\xa4\xbf\xf5\x90\xc1\x78\x2c\xe5\xfe\xe8\x09\xed\x51\x1d\x79\xb7\x77\xb5\x63\x7f\x45\xbe\xd8\xf4\x12\xc1\x45\x5b\x8d\x82\x17\x59\x3c\x95\x8e\xab\x29\xa8\x59\xfa\x99\x64\x49\xb5\x5d\xec\x88\x93\x4f\xe6\xf2\xab\x26\x51\xdb\x86\x3e\x9e\x6e\x6c\x6b\x4c\xf5\xab\x3c\x8c\xde\xfd\x89\xa2\x96\xee\x5a\x95\xdb\x1e\xdb\x81\xe9\xaf\xc2\x4c\x7b\xce\x35\x7b\x3c\xed\x15\xfa\xa5\x3e\x27\x0e\x05\x74\x3c\x61\x9f\xd8\xf5\x36\x4f\xea\xd8\xb3\x5d\xcc\x55\x40\x96\x4c\xf7\x47\xa1\x57\x39\xbe\x61\xcf\x3a\xc4\x97\xc4\xf6\x2d\x5f\xa9\x53\x70\x3d\xab\x21\x20\x53\x1b\x55\x57\xb7\xde\x7a\xc9\xde\xdd\x23\xbb\x12\xbe\x7c\xdf\xde\xe8\x76\xd4\x4c\xfd\xdd\x30\xce\x15\x67\x1a\xfe\xbf\x16\x68\xb7\xff\xa7\x57\x39\x93\x31\x5e\xdd\x92\x2e\xa4\x87\x14\x02\x45\x81\xcc\xc9\xa7\x19\x6c\x32\xad\x6f\x30\x16\x05\x21\xd7\x68\xa4\x62\xa3\x19\x44\x0c\xa4\xe9\x86\x5a\x68\x26\x96\xa5\x51\x0d\xa6\x94\x94\x3d\xea\xae\x61\x22\x56\xb8\x58\x04\x15\xaf\x2c\x61\x4a\x1e\x2c\x79\x92\x46\x17\x95\x46\x12\x03\x8a\xf0\xd0\xb0\x94\x41\xec\xe2\x0c\xe6\x8c\x0c\x53\x75\x5e\x5c\x63\x57\x51\x64\x8d\x6f\x15\xb0\xc5\x6b\x6f\x4e\x4b\x55\xf6\x1b\xe5\x14\x80\xeb\x2a\x14\xe7\x19\x7d\x25\xb8\xd0\xd2\xa6\x0f\x4f\xad\xdb\xd6\x2a\xd3\x4c\xaf\xe0\x42\x4e\xbc\xf6\xf2\x8c\xec\x70\xd2\x24\xed\xc8\xea\x7b\xa3\xd7\x3d\xd9\x80\x1b\xeb\xdb\x50\xae\x5c\x59\xd9\xb3\xbd\xc8\xce\x20\xf5\xf7\x45\x53\xd2\xae\xdb\xa7\x2b\xb4\x6e\xe3\xef\x00\x00\x00\xff\xff\x6c\x75\x08\x89\xa5\x03\x00\x00")

func viewsUncssHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsUncssHtml,
		"views/uncss.html",
	)
}

func viewsUncssHtml() (*asset, error) {
	bytes, err := viewsUncssHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/uncss.html", size: 933, mode: os.FileMode(420), modTime: time.Unix(1436870288, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/.layout.html.swp": viewsLayoutHtmlSwp,
	"views/article.html": viewsArticleHtml,
	"views/article_edit.html": viewsArticle_editHtml,
	"views/article_form.html": viewsArticle_formHtml,
	"views/article_list.html": viewsArticle_listHtml,
	"views/fortune.html": viewsFortuneHtml,
	"views/index.html": viewsIndexHtml,
	"views/layout.html": viewsLayoutHtml,
	"views/login.html": viewsLoginHtml,
	"views/uncss.html": viewsUncssHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		".layout.html.swp": &bintree{viewsLayoutHtmlSwp, map[string]*bintree{
		}},
		"article.html": &bintree{viewsArticleHtml, map[string]*bintree{
		}},
		"article_edit.html": &bintree{viewsArticle_editHtml, map[string]*bintree{
		}},
		"article_form.html": &bintree{viewsArticle_formHtml, map[string]*bintree{
		}},
		"article_list.html": &bintree{viewsArticle_listHtml, map[string]*bintree{
		}},
		"fortune.html": &bintree{viewsFortuneHtml, map[string]*bintree{
		}},
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{
		}},
		"layout.html": &bintree{viewsLayoutHtml, map[string]*bintree{
		}},
		"login.html": &bintree{viewsLoginHtml, map[string]*bintree{
		}},
		"uncss.html": &bintree{viewsUncssHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

