// Code generated by go-bindata.
// sources:
// views/article.html
// views/article_edit.html
// views/article_form.html
// views/article_list.html
// views/index.html
// views/layout.html
// views/login.html
// views/quote.html
// views/uncss.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsArticleHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x51\x6b\x83\x30\x14\x85\x9f\xdd\xaf\xb8\xe4\xbd\xc6\xf6\x61\x4f\x5a\x28\x8c\xc1\x60\x83\xc1\xf6\x07\xee\xcc\x55\xc3\xb2\x28\x49\xac\x1b\x5d\xff\xfb\x92\x68\x2d\x74\x42\xfb\xa4\x39\xe7\xe6\x7c\xf7\xe8\xe1\x00\x82\x2a\xa9\x09\xd8\x5e\xd2\xc0\xe0\x78\xbc\xf3\xda\x20\x5d\x03\xe9\xce\x38\x59\x2a\x0a\x5a\x92\x24\x79\xb3\xde\x7a\x2b\x7d\x97\x2e\x6a\x39\xf7\x42\x34\x3a\x28\x15\x5a\x5b\x30\x45\x28\x58\x1c\x7a\xed\x3f\x94\xb4\x0d\x89\x9d\x83\x5f\x78\x40\x47\x8f\xad\xf9\x42\x07\x6c\x93\x65\xf7\x69\xb6\x4e\xb3\x0d\x8b\x21\x5d\xcc\x88\xc1\xf4\x1d\x86\x5f\xd0\x7c\x8a\x76\xd0\xd3\x2a\xb2\x82\xe7\xb6\xae\x49\x9c\xd6\xd0\xb8\xf7\x57\x46\x27\x7d\xb2\x33\x69\xf2\x93\x1c\xa1\x31\x54\x15\x8c\xe3\xb8\x3f\x0f\xe1\x6f\xaa\xaf\xfd\x04\xef\x75\x37\x5e\x60\xe0\x42\x91\x82\x9d\x95\x6d\x6e\x3b\xd4\xa7\x32\x15\x42\x85\x2b\xfa\xa1\x95\xf5\x42\x70\x79\xb0\xfd\x03\x47\x3e\x29\x4b\xb7\x41\x2f\x91\x57\x80\x0b\x28\x7d\x63\x3d\x12\xd2\xcd\x98\x78\x58\x62\x74\xa4\x4b\xa9\x2e\x30\x57\xb3\x05\x29\x72\x34\xa7\x4f\xc7\xa5\x7c\x67\xfc\x07\x5b\xb5\xff\x00\x39\x8f\x3f\xef\x5c\x68\xe1\xed\x2f\x00\x00\xff\xff\xd6\x6c\x11\x38\x92\x02\x00\x00")

func viewsArticleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticleHtml,
		"views/article.html",
	)
}

func viewsArticleHtml() (*asset, error) {
	bytes, err := viewsArticleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article.html", size: 658, mode: os.FileMode(420), modTime: time.Unix(1444377443, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsArticle_editHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xc1\x4e\xc3\x30\x0c\x86\xcf\xe5\x29\xac\x70\x66\x65\xf7\x76\x12\x87\x9d\x41\xda\x5e\xc0\x2c\x5e\x1b\x29\x6d\x87\xe3\x6c\xa0\x69\xef\x4e\x92\xae\x53\x5b\x86\xe0\xe6\x7e\xf9\xfb\xff\xb6\xec\xf3\x19\x34\xed\x4d\x4b\xa0\x8e\x86\x4e\x0a\x2e\x97\x87\xc0\x4e\x46\x6a\x58\xbc\xb0\x98\x9d\xa5\xc8\xb2\x2c\x2b\xea\xe5\x6a\xad\x8d\x00\xf6\xb8\xc8\x03\x88\x62\xb3\x87\x35\x73\xc7\x6e\x10\x7a\x0b\x3b\x8b\xce\x95\x8a\x12\x57\x49\xc6\xd8\x56\x34\x55\x66\x85\x35\xab\xf0\xb4\x08\xdf\x45\x1e\xea\xa8\xa3\x56\x0f\x46\xb9\xb7\x73\xb4\xef\xb8\x81\x86\xa4\xee\x74\xa9\xde\x5e\x37\xdb\x60\x9e\x9c\x4c\x7b\xf0\x02\xf2\x75\xa0\x52\x09\x7d\x8a\x02\x13\x14\x62\xc4\x92\x82\x16\x1b\xba\x7d\x1c\x2c\xee\xa8\xee\xac\x26\x2e\xd5\xb6\x67\x47\xb4\x3e\x28\x62\x2f\x89\x84\x38\x05\x4c\x1f\xde\x30\xe9\x5f\x13\xae\x53\x3a\xeb\x2b\x05\x1a\x05\x9f\x04\xb9\x22\x29\xd5\xe3\x24\xb8\x17\x4c\x72\x37\x09\x8d\x62\x23\xf8\x5f\xea\x75\x18\xac\x6c\xd8\xdb\x7c\x9c\x81\x8e\x07\xea\xd9\x3d\xf3\x68\x88\x4c\x38\x78\x26\x7f\xee\x4e\x61\xa8\xe5\xf3\xdc\x3a\x3e\xa6\x6d\xc5\x2a\x6d\x6c\xf8\xfd\xef\x56\xdd\xcf\x3e\xdd\xbc\xc9\x78\x15\xf7\xb6\xe9\xfc\x7b\x63\xe4\xa6\xde\xe0\x91\x7a\x59\x91\xc7\x6b\x18\x5f\xc8\xad\xfa\x0e\x00\x00\xff\xff\x63\x83\x59\x11\xd8\x02\x00\x00")

func viewsArticle_editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_editHtml,
		"views/article_edit.html",
	)
}

func viewsArticle_editHtml() (*asset, error) {
	bytes, err := viewsArticle_editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_edit.html", size: 728, mode: os.FileMode(420), modTime: time.Unix(1444377443, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsArticle_formHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4d\x4e\xeb\x30\x10\xc7\xd7\xe9\x29\x46\x7e\xeb\xd7\xd0\x7d\xd2\x0d\x42\x88\x0d\x20\xb5\x17\x30\xcd\x34\xb5\xe4\x24\x65\x3c\x6e\x41\x55\xee\xce\xd8\xa9\x2b\x1a\x52\xc1\x2e\x9e\xf9\xe5\xff\x21\xfb\x74\x82\x0a\xb7\xa6\x45\x50\x07\x83\x47\x05\x7d\x3f\xcb\xb2\xac\xd8\x2d\x96\xcf\x78\x04\x4d\x6c\x36\x16\x8b\x5c\xce\x33\x61\xcd\x16\x1e\x88\x3a\x72\x89\xf3\x16\x36\x56\x3b\x57\x2a\x8c\x73\x15\x31\xd2\x6d\x8d\xd7\x64\x56\x58\xb3\x94\xd5\x5c\xce\x45\x2e\xdf\x81\xc3\xb6\x4a\x42\xb9\xb7\xe3\xd1\xb6\xa3\x06\x1a\xe4\x5d\x57\x95\xea\xf5\x65\xb5\x16\xf1\xa8\x64\xda\xbd\x67\xe0\xcf\x3d\x96\x8a\xf1\x83\x15\x18\x21\xd8\xb0\x45\x05\xad\x6e\xf0\x72\xd8\x5b\xbd\xc1\x5d\x67\x2b\xa4\x52\xad\x87\xd9\x41\x5b\x2f\x84\x78\x3d\x05\x9d\xf9\x23\x32\x24\xbe\xef\x15\x10\xbe\x7b\x43\x58\xdd\x34\x3b\x17\x76\xd6\xd7\x0a\x2a\xcd\xfa\x3f\x6b\xaa\x91\x4b\xf5\xef\x2a\xc3\x00\x5c\x45\x58\xc5\xd1\x64\x82\x81\xfe\x53\x80\x73\x45\x5d\x5b\xb9\xb8\x71\xc9\x34\x9d\xae\x99\xb6\x13\x3e\x41\x5b\x13\xea\x24\x1f\xad\xa8\x3b\x4a\xd5\xc5\xdd\xd8\x25\x2c\x97\x23\xed\xf8\x43\xb8\xdd\xa4\xf4\x7b\x01\xf7\x33\xbd\xbb\x1d\xdd\xc5\xdc\x13\xaa\xce\xbf\x35\x86\x2f\x3f\xde\x8b\x37\xe3\x00\x16\x79\x78\x46\xdf\x9f\xd6\x57\x00\x00\x00\xff\xff\xb1\xb9\xa4\xb8\xf3\x02\x00\x00")

func viewsArticle_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_formHtml,
		"views/article_form.html",
	)
}

func viewsArticle_formHtml() (*asset, error) {
	bytes, err := viewsArticle_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_form.html", size: 755, mode: os.FileMode(420), modTime: time.Unix(1444377443, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsArticle_listHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xc1\x8a\xdb\x30\x10\x86\xcf\xf6\x53\x0c\xba\xdb\x72\x72\xe8\x49\x11\x04\x4a\xa1\x50\x4a\xa1\x7d\x01\xd5\x1e\xdb\x02\x55\x32\x92\x1c\x53\xb2\x79\xf7\x95\xac\xd8\xd9\xec\x9a\x4d\x6e\x9e\x7f\x46\xf3\xfd\xfa\xad\xf3\x19\x1a\x6c\xa5\x46\x20\x27\x89\x13\x81\xcb\x25\x0f\xda\x24\x7d\x0f\xe5\xd1\x7a\x59\x2b\x74\x51\xcc\xb2\x8c\xf5\x3b\xbe\x4a\x52\x83\xd0\x1e\x8b\xba\xb7\x46\x1b\x65\x3a\x59\x0b\x05\xc6\x36\x68\x19\x0d\x83\x79\x16\xd6\xc8\x16\x7e\x98\xae\xc3\x66\xd9\x30\x70\x26\xa0\xb7\xd8\x1e\x08\x9d\xac\xf4\x48\xf8\x4f\x9c\x18\x15\x9c\xd1\x21\x9d\x41\xbd\x4e\x8f\x0a\x6a\x25\x9c\x3b\x10\x71\xc5\x92\x34\x63\x85\xee\x10\xca\x34\x97\x38\xc6\x2e\xa8\xf2\xbb\xfb\x35\xfe\x55\xd2\xf5\x2b\x37\x63\x4a\xf2\xf9\x23\x4e\x97\x6b\xfb\xe8\xe1\x05\xbe\x0a\x8f\xdf\x8c\xfd\x27\x3c\x90\x7d\x55\x7d\x29\xab\x5d\x59\xed\x63\x12\x40\xe1\x66\xf7\x6a\x81\xc6\x05\xbf\xd5\xd8\x85\x3e\x01\x2f\xbd\xc2\x03\x89\xda\x1f\xd1\xa9\x98\x63\x90\xf9\x5c\xc7\x56\xa8\xe2\xe5\xf2\x2c\xdb\x8a\x23\xf8\xd2\xe2\x94\x8c\xa5\xf6\x96\xf7\x30\xf5\x99\x09\x3a\xea\x21\x1d\x59\xed\xdc\x14\xce\xdc\x20\xf4\x92\x62\x2b\xa0\x15\x05\xfe\xc7\xc2\x05\x21\x76\x69\x6c\xf3\xc5\xe2\x1c\xbf\x72\xf8\x2c\xf9\x3d\xf7\x01\x75\x9b\xa7\x9f\xbe\x28\x36\xd2\xaf\xac\xb9\xd8\x02\x0d\xa8\x6b\xa9\x3e\xb2\x1e\x6d\x6f\x50\x61\x78\x8f\xcb\xfe\x6b\xb9\x45\xf0\x36\x84\x57\x98\x0d\x04\xa3\xcb\xff\xbc\xbf\x19\xa3\xe9\xfd\xbd\x51\xef\x5f\x3a\x1d\x15\xcf\x6f\xd2\xfa\xf5\x1a\x00\x00\xff\xff\x39\x22\xec\xcd\x9f\x03\x00\x00")

func viewsArticle_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_listHtml,
		"views/article_list.html",
	)
}

func viewsArticle_listHtml() (*asset, error) {
	bytes, err := viewsArticle_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_list.html", size: 927, mode: os.FileMode(420), modTime: time.Unix(1444377443, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x31\x6b\xc3\x30\x10\x46\x67\xe7\x57\x1c\x37\x3b\x71\x3c\x74\x48\xb1\x05\x2d\x5d\x0b\xa5\x14\x3a\x9f\xed\x8b\xad\x62\xe9\x84\x74\x71\x31\x21\xff\xbd\x72\x87\x12\xe8\x26\x1e\x1f\xbc\xa7\xbb\x5e\x61\xe0\xb3\xf5\x0c\xb8\x58\xfe\x46\xb8\xdd\x76\x45\x51\x34\x53\x6d\x3e\x79\xee\xc5\x71\x53\xe5\xf7\x2f\x0b\xb0\x48\x4f\x5d\x8b\x93\x6a\x78\xac\xaa\xd4\x4f\xec\xe8\x20\x71\xac\x10\x74\x0d\x2c\xe7\x16\xdf\x38\x26\xf1\x68\x5e\x57\xf0\xe4\x18\x6c\x82\x26\x05\xf2\x10\xa2\x04\x8e\xba\xb6\xb8\x71\x34\xef\xe2\xc8\x7a\x78\xa6\xcb\x78\xc9\x92\x6d\x63\x4a\x68\x1c\x2b\xdd\x6d\x3b\x1b\x75\x7a\x21\x65\x84\x5e\xbc\xb2\xd7\x16\xeb\xd3\xe9\xb8\xaf\xeb\xfd\xf1\x01\x4d\xee\x7f\x1a\x73\xfc\x1d\xcb\x5f\x80\x95\x29\x26\x90\x79\x28\xff\xd9\xbf\xa4\xfb\xb0\x3a\xe7\x82\x81\x17\x9e\x37\xfc\x67\x0f\x94\x92\x15\x9f\x75\x25\xcc\x94\x85\xb6\x3f\x34\x55\x30\xbb\xac\x61\x3f\x6c\xc7\xf9\x09\x00\x00\xff\xff\xed\x21\x18\x24\x31\x01\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 305, mode: os.FileMode(420), modTime: time.Unix(1444377443, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x4d\x6f\xe3\x36\x13\x3e\x27\xbf\x82\xaf\x2e\xb6\x5f\x48\x62\x9d\x74\xd3\xee\x46\x32\x9a\xaf\x16\x0b\xb4\xbb\x45\x91\x02\x2d\x82\x1c\x68\x69\x44\x31\xa1\x48\x2d\x49\x59\x71\x13\xff\xf7\x0e\xa9\x28\x76\x36\x41\x50\xec\xc5\x22\xe7\xe3\x99\xe1\xcc\x3c\xe3\xfb\x7b\x52\x42\x25\x14\x90\x88\xb5\x6d\x44\x36\x9b\xfd\xec\x7f\xe7\x9f\xcf\x2e\xff\xfe\xfd\x82\xd4\xae\x91\x8b\xfd\xcc\x7f\x88\x64\x8a\xe7\x11\xa8\x68\xb1\xbf\x97\xd5\xc0\x4a\xfc\xee\x65\x0d\x38\x46\x8a\x9a\x19\x0b\x2e\x8f\x3a\x57\x25\x3f\x46\x41\xb1\x64\x16\x48\x6d\xa0\xca\x23\x0c\x71\xea\x6f\x9b\x4d\xb4\xf5\xa9\x9d\x6b\x13\xf8\xd2\x89\x55\x1e\xfd\x95\xfc\x79\x92\x9c\xe9\xa6\x65\x4e\x2c\x25\x44\xa4\xd0\xca\x81\x42\xc0\x8f\x17\x39\x94\x1c\x76\xfc\x14\x6b\x20\x8f\x56\x02\xfa\x56\x1b\xb7\x63\xda\x8b\xd2\xd5\x79\x09\x2b\x51\x40\x12\x2e\x31\x11\x4a\x38\xc1\x64\x62\x0b\x26\x21\x9f\x0f\x30\x4e\x38\x09\x8b\x0b\xd9\x0b\xc5\x0c\x49\x08\xa6\x97\x5e\x7a\x19\x26\x98\xd1\x41\xeb\xed\xa4\x50\xb7\xc4\x80\xcc\x23\x81\x41\x22\xe2\xd6\x2d\x46\x16\x0d\xe3\x40\x5b\xc5\xa3\xc7\xd7\xd1\x8a\xad\xbc\x41\x32\x3f\xba\x9b\x1f\xa5\x41\x63\xc5\x3f\x60\xf3\x28\x48\xa2\x6f\x02\x3b\x3c\xb8\x3b\x3c\x78\x06\x16\x24\xdf\x06\xf6\xfe\xe8\xee\xfd\xf3\xcc\x82\xe4\x6b\x30\xeb\xd6\x12\x6c\x0d\xe0\x46\x04\x9c\x88\xb4\xb0\x76\x8c\xe0\xe0\xce\x51\x7f\x0f\x8e\xb6\x30\xa2\x75\x84\xd9\xb5\x2a\x88\x35\xc5\x60\x7e\x83\xda\x8c\x0e\x3a\x3f\x29\xf4\x71\x54\xb2\xa5\x2e\xd7\xc1\xcf\x0b\xc0\xf8\x23\x9e\xe7\x8b\x8c\x8d\xe9\x46\x63\x53\x32\xca\x10\x03\x75\xc1\x46\xb1\x55\x38\xec\x65\x9d\x1c\x0e\x3e\xe9\x1d\x3f\x6a\x1d\x2b\x6e\xf5\x0a\x4c\x25\x75\x9f\x16\xba\xa1\x9d\x05\x63\xe9\xe1\xf7\x3f\x1c\x1c\xbd\x3b\xa2\x30\xc0\x46\x8b\x13\x7b\x3b\x60\xa3\xff\xab\x48\x5c\xb8\xba\x5b\x06\x88\x27\xa7\x33\x5d\xc2\x5b\x5e\x0d\x13\xd2\xe9\x0f\x46\xe3\x41\xa5\x4b\xd6\xf1\x0e\x7e\x7a\xf4\xf6\x48\x1e\x41\x61\x86\xee\x2d\x10\x83\x45\x89\x16\x7f\xe0\xef\x5b\x56\x15\x8e\x7c\xa7\x90\x0e\x3f\x0f\x87\xe7\xb6\x19\x7d\x2c\x50\x46\xc7\x9a\x65\x2d\x29\x24\xb3\xd8\x71\x5f\x75\x6c\x35\xfa\xfe\x86\xac\x68\x98\x14\xd6\x91\xe5\x1a\xc9\x6f\x05\x57\x19\x6d\x43\x6f\xe8\xb6\x39\x99\x85\xc2\x09\xad\x02\x0e\x72\xc4\x41\xd3\x4a\xe6\x70\x4f\x78\xf2\x45\x24\xf5\xab\xc2\xbb\xec\xd8\x65\x95\xd6\x6e\xec\xed\x98\xb4\x67\xfa\x07\x4a\x57\x18\xb2\x64\x4e\x9b\xb4\x3f\x4c\xb5\xe1\xb4\xa8\xa1\xb8\xa5\x68\x02\x06\xb0\xcc\x99\x6d\x99\x1a\xb3\xad\x18\xa9\x58\xe2\xf7\xce\xbb\x30\x4e\xa8\x5a\xf8\xc7\xbe\x06\x7c\x23\xb8\x65\xfd\x13\xaa\xb5\xc9\x53\xa8\xff\x10\x03\xed\x0f\x9f\x87\xc0\xb7\x8a\x8a\xfc\xaa\x39\x87\x72\x78\xe3\x36\x24\x95\x9a\xeb\xce\xbd\x8a\x24\x75\x71\xfb\x02\x09\x64\x58\x7c\x2f\x40\x84\x7a\x15\xa3\x53\x1e\x25\x61\xd2\xbd\x44\x52\xe5\x58\xf1\x6d\x95\xb3\x91\x68\xd3\xaa\x53\xa1\x0d\x53\x11\xdb\x58\xc7\x3c\x36\x31\x8b\x9b\xd9\xbd\xb8\x9a\xfc\xa2\x35\x97\x70\xa2\x98\x5c\x3b\x51\xd8\xcf\xcb\x1b\xec\xd8\xe4\x3a\x37\xc7\xe2\xca\x5c\xe7\xfe\xe7\xe1\xe1\xc9\x7f\x76\x3f\xf5\x92\xf4\x4b\x3e\x7c\x1e\x1e\xae\xae\x67\x69\xdb\xd9\x7a\xca\x0c\xef\x1a\x5c\xb6\x76\xb6\x89\x83\x52\xe6\xf3\xff\x2b\xe8\xc9\x39\xce\xc5\x74\x76\xcc\x72\x9b\x16\x38\xc9\x0e\x2e\x24\x78\xc3\xa9\x9e\xc5\x0d\x0a\x39\xb8\x47\x89\x3d\x5d\x5f\x32\xfe\x09\x97\x38\xea\xae\xbe\xbb\x3e\x66\x69\x58\x20\xf9\x1c\x4f\x7e\x89\xf0\xe3\x26\x6d\x99\x41\xd3\x4f\xc8\xbb\x54\x28\x64\xb2\x3b\x05\x9c\x7c\x98\xfa\x07\x6d\x66\x53\x64\x56\xa9\xfb\xb8\xd4\x45\xc8\x26\x9e\x0c\x45\x98\xc4\x13\x4a\xfb\xbe\x4f\x79\x78\x6f\xc2\xc6\x07\x07\x3a\x6f\x6f\x37\x16\x2d\x39\x9b\xcc\x8e\xf7\x39\x9b\x4e\x86\x84\x27\x31\x99\x60\x91\xbf\x2a\xd5\xc7\x73\x2c\xb9\x57\xb1\xce\xe9\xd1\xc1\x62\x27\xbc\xac\xc5\x75\xeb\xa9\xe0\xe5\x81\x07\xdb\x9d\x37\xec\x3a\x64\x53\xf8\xff\xdc\x36\x6f\xe7\xcf\x76\x20\xd1\x66\xb3\x55\xfe\x1b\x00\x00\xff\xff\xb9\xc9\x1f\x4a\x8a\x07\x00\x00")

func viewsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutHtml,
		"views/layout.html",
	)
}

func viewsLayoutHtml() (*asset, error) {
	bytes, err := viewsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/layout.html", size: 1930, mode: os.FileMode(420), modTime: time.Unix(1444378450, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x4b\x0a\xc2\x30\x10\x40\xd7\xe9\x29\x86\xb9\x40\x71\x9f\xf6\x04\x82\x82\x5e\x20\x9a\xa9\x09\xe4\x47\x3e\x2d\x52\x7a\x77\xd3\x88\x0b\xa1\xbb\x79\x8f\x99\xe1\xad\x2b\x48\x9a\xb4\x23\xc0\x59\xd3\x82\xb0\x6d\x1d\x63\x8c\xab\xd3\x78\xf6\x2f\xed\x78\x5f\xa7\x66\x26\x1f\x2d\x58\xca\xca\xcb\x01\xaf\x97\xdb\x1d\x9b\x67\x5c\xbb\x50\x32\xe4\x77\xa0\x01\x83\x48\x69\xf1\x51\x22\x38\x61\xff\x38\x18\xf1\x24\xe5\x8d\xa4\x58\xcf\x7f\xfa\xe0\x45\x2a\x0f\xab\x33\xc2\x2c\x4c\xa9\xd8\x2a\xbe\x7b\xbc\xdf\x1b\xc6\xae\x36\x93\x93\x7b\xe9\x27\x00\x00\xff\xff\xa8\x7e\x8c\xbe\xbe\x00\x00\x00")

func viewsLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLoginHtml,
		"views/login.html",
	)
}

func viewsLoginHtml() (*asset, error) {
	bytes, err := viewsLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/login.html", size: 190, mode: os.FileMode(420), modTime: time.Unix(1444377443, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsQuoteHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x2a\xcb\x4c\x2d\x57\x52\xa8\xad\xe5\x02\x8a\x95\x67\x96\x64\x28\xe8\xb9\xe5\x17\x95\x94\x02\xa5\x80\x62\x9c\x9c\x9c\x36\x49\x39\xf9\xc9\xd9\x85\xa5\xf9\x25\xa9\x76\x20\x3e\x27\x50\x9d\x5e\x48\x6a\x45\x89\x42\x8d\x82\x6f\x62\x51\x76\x4a\x7e\x79\x1e\x54\x29\xa7\x4d\x5a\x3e\x50\x59\x91\x1d\x48\x89\x63\x69\x49\x46\x7e\x11\x50\xc6\x46\x1f\x2a\x0a\x36\x4d\x1f\xd9\x38\xa0\xba\xd4\xbc\x14\xa8\xe5\x10\x16\x20\x00\x00\xff\xff\xbb\xc0\xbe\xee\x9a\x00\x00\x00")

func viewsQuoteHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsQuoteHtml,
		"views/quote.html",
	)
}

func viewsQuoteHtml() (*asset, error) {
	bytes, err := viewsQuoteHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/quote.html", size: 154, mode: os.FileMode(420), modTime: time.Unix(1444377443, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsUncssHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\xcb\x6e\xdc\x3a\x0c\x5d\xcf\xfd\x0a\x66\x96\x17\x30\x06\xdd\x3b\x59\xf4\xb5\x28\x50\x34\x40\xbb\xe9\x92\x96\x18\x8f\x30\x7a\x95\xa2\x92\xf8\xef\x4b\xd9\x1e\x61\xd0\xa6\x0b\x9b\x14\x1f\x87\x14\x75\x38\xde\x7d\xfc\xf6\xe1\xc7\xcf\xc7\x4f\x70\x96\xe0\x1f\xfe\x1b\x37\x71\x18\xa7\x64\x17\x95\x87\xb1\x90\x11\x97\x62\xd3\x0f\xe3\xdd\x30\xc0\x7b\x2c\xce\x80\xe0\x5c\xa0\x16\xb2\x30\x2d\x20\x67\x82\xe2\x84\x60\x18\xb6\xb8\xf3\xbb\x87\xf1\xa4\xbf\xf5\x90\xc1\x78\x2c\xe5\xfe\xe8\x09\xed\x51\x1d\x79\xb7\x77\xb5\x63\x7f\x45\xbe\xd8\xf4\x12\xc1\x45\x5b\x8d\x82\x17\x59\x3c\x95\x8e\xab\x29\xa8\x59\xfa\x99\x64\x49\xb5\x5d\xec\x88\x93\x4f\xe6\xf2\xab\x26\x51\xdb\x86\x3e\x9e\x6e\x6c\x6b\x4c\xf5\xab\x3c\x8c\xde\xfd\x89\xa2\x96\xee\x5a\x95\xdb\x1e\xdb\x81\xe9\xaf\xc2\x4c\x7b\xce\x35\x7b\x3c\xed\x15\xfa\xa5\x3e\x27\x0e\x05\x74\x3c\x61\x9f\xd8\xf5\x36\x4f\xea\xd8\xb3\x5d\xcc\x55\x40\x96\x4c\xf7\x47\xa1\x57\x39\xbe\x61\xcf\x3a\xc4\x97\xc4\xf6\x2d\x5f\xa9\x53\x70\x3d\xab\x21\x20\x53\x1b\x55\x57\xb7\xde\x7a\xc9\xde\xdd\x23\xbb\x12\xbe\x7c\xdf\xde\xe8\x76\xd4\x4c\xfd\xdd\x30\xce\x15\x67\x1a\xfe\xbf\x16\x68\xb7\xff\xa7\x57\x39\x93\x31\x5e\xdd\x92\x2e\xa4\x87\x14\x02\x45\x81\xcc\xc9\xa7\x19\x6c\x32\xad\x6f\x30\x16\x05\x21\xd7\x68\xa4\x62\xa3\x19\x44\x0c\xa4\xe9\x86\x5a\x68\x26\x96\xa5\x51\x0d\xa6\x94\x94\x3d\xea\xae\x61\x22\x56\xb8\x58\x04\x15\xaf\x2c\x61\x4a\x1e\x2c\x79\x92\x46\x17\x95\x46\x12\x03\x8a\xf0\xd0\xb0\x94\x41\xec\xe2\x0c\xe6\x8c\x0c\x53\x75\x5e\x5c\x63\x57\x51\x64\x8d\x6f\x15\xb0\xc5\x6b\x6f\x4e\x4b\x55\xf6\x1b\xe5\x14\x80\xeb\x2a\x14\xe7\x19\x7d\x25\xb8\xd0\xd2\xa6\x0f\x4f\xad\xdb\xd6\x2a\xd3\x4c\xaf\xe0\x42\x4e\xbc\xf6\xf2\x8c\xec\x70\xd2\x24\xed\xc8\xea\x7b\xa3\xd7\x3d\xd9\x80\x1b\xeb\xdb\x50\xae\x5c\x59\xd9\xb3\xbd\xc8\xce\x20\xf5\xf7\x45\x53\xd2\xae\xdb\xa7\x2b\xb4\x6e\xe3\xef\x00\x00\x00\xff\xff\x6c\x75\x08\x89\xa5\x03\x00\x00")

func viewsUncssHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsUncssHtml,
		"views/uncss.html",
	)
}

func viewsUncssHtml() (*asset, error) {
	bytes, err := viewsUncssHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/uncss.html", size: 933, mode: os.FileMode(420), modTime: time.Unix(1444377443, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/article.html": viewsArticleHtml,
	"views/article_edit.html": viewsArticle_editHtml,
	"views/article_form.html": viewsArticle_formHtml,
	"views/article_list.html": viewsArticle_listHtml,
	"views/index.html": viewsIndexHtml,
	"views/layout.html": viewsLayoutHtml,
	"views/login.html": viewsLoginHtml,
	"views/quote.html": viewsQuoteHtml,
	"views/uncss.html": viewsUncssHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"article.html": &bintree{viewsArticleHtml, map[string]*bintree{
		}},
		"article_edit.html": &bintree{viewsArticle_editHtml, map[string]*bintree{
		}},
		"article_form.html": &bintree{viewsArticle_formHtml, map[string]*bintree{
		}},
		"article_list.html": &bintree{viewsArticle_listHtml, map[string]*bintree{
		}},
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{
		}},
		"layout.html": &bintree{viewsLayoutHtml, map[string]*bintree{
		}},
		"login.html": &bintree{viewsLoginHtml, map[string]*bintree{
		}},
		"quote.html": &bintree{viewsQuoteHtml, map[string]*bintree{
		}},
		"uncss.html": &bintree{viewsUncssHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

